/* 
    * GitHub: https://github.com/maksim-montano
    * Video: https://www.youtube.com/watch?v=AJrfKmK71FM&feature=youtu.be
        #3:57 - python code
    
    * GitHub этого проекта: https://github.com/maksim-montano/project-inform
    * Pastebin JS: https://pastebin.com/7mNc9AzD
    * Pastebin Python: https://pastebin.com/NaVWy1Mc


    * - Как воспроизвести код на пк, не в онлайн редакторе? Во первых, нужно установить node.js lts версию, на сайте https://nodejs.org/en/
        После установки node js - нужно установить любой редактор кода: Atom, VS Code, Sublime Text 3 и тому подобное
        Далее, заходим в редактор кода и открываем папку проекта. Я буду рассказывать на примере VS Code Открываем консоль/терминал, кому как легче называть(SHIFT + `)
        Открыв консоль - мы прописываем:
            1. npm i
            2. npm i readline
            3. npm init
        Далее мы создаем index.js(если вы указали другое имя главному файлу, то посмотреть его можно в файле "package.json", ключ называется "main")
        Далее, копируем весь код из `ссылка` или же из репозитория GitHub: https://github.com/maksim-montano/project-inform, если не удобное копировать, то можно скачать
        После чего заходим к консоль, если же вы с VS Code... Прописываете "node ." и все, код успешно запущен


    * - Код так же можно воспроизвести и в онлайн редакторе кода на сайте repl.it(https://repl.it/). Просто создайте новый repl, выберите язык node.js, после чего просто установите пакет readline (слева, около файла index.js будет такой куб, при наведении на него будет написано: packages. Нажимаете на него и пишете readline, устанавливаете и все)
    Далее вставляете код, ссылки на него можно найти выше (если будете запускать код, то лучше переключитесь в браузере на Shell и там пропишите "node .")
*/

// < ==== [Либы] ==== > //

const readline = require('readline');

// < ==== [ Переменные ] ==== > //

const Array = [];
let i = 0;
let inStarted = false;
let result = 0;

// < ==== [Functions] ==== > // 
let prompttext = function(text) { // => функция установки нужного нам prompt'a
    rl.setPrompt(text);
    rl.prompt()
};

let multiply = function() { // => функция умножения всех элементов массива (вообще, от этой функции по сути нету смысла, так как эта функция используется всего-лишь один раз, а функции в основном предназначены для неоднократного выполнения одного и того же алгоритма. Но при написании кода - мне очень сильно мешался этот блок кода, из-за чего был вынужден перенести его на верх ввиде функции)
    prompttext('')
    console.log(`Ваш массив чисел: \`${Array.join(", ")}\``);
    result = Array.reduce((first, current) => { // reduce - очень интересный метод, в нашем случае - он умножает все элементы массива. Допустим есть массив [1, 2, 3, 4, 5, 6, 7], метод reduce - позволяет вызвать функцию обратного вызова(callback => array.reduce(callback)) для каждого элемента массива один раз. В моем коде мы умножаем между собой параметры функции first и current:
        /*
            Происходит вызов функции callback первый раз, в параметры передается: first => 1. curent => 2,
            Второй раз, в параметры уже передается: first => 2, current => 3,
            Третий раз: first => 6, current => 4,
            Четвертый раз: first => 24, current => 5,
            Пятый раз: first => 120, current => 6,
            Шестой раз: first => 720, current => 7,
            Итог: 5040. После первого выполнения функции, наверное, как вы уже заметили - передается какое-то не понятное число, и не известно откуда оно берется, но все очень просто. При умножении двух параметров - мы получаем результирующее число, и именно это результирующее будет передано в следующей функции обратного вызова(в следующем будет новое результирующее, которое будет умножаться с current, и так далее), и так будет до того момента, пока current не достигнет последнего элемента массива.
        */
        return first * current; // возвращение произведения параметров
    })
    console.log(`По моим подсчетам... Все числа в произведении дают: ${result}`);

    rl.close();
}

// < ======================= > // 



// < ==== [ INDEX.JS ] ==== > //
let rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
});

console.log(`Перед началом ввода чисел - убедительная просьба не нажимать на такие сочетания клавиш, как: CTRL + C и CTRL + Z. \nВ коде стоит триггер на эти клавиши.\n\nЕсли вы хотите, чтобы консоль не реагировала на эти сочетания клавиш, то просто уберите из кода триггер на событие "SIGINT" и "SIGTSTP".`)



rl.question("Начинаем? (да, нет) ", (answer) => { // вопрос пользователю, готов ли он начать
    if(answer == "да".toUpperCase() || answer == "да".toLowerCase() || answer == "дА" || answer == "Да") {
        inStarted = true;
        prompttext('> Укажите любое число: ');
    } else {
        rl.pause();
    }
})

// < ==== [ Обработчик событий ] ==== > //

rl.on('line', (res) => { // обработчик эвента 'line', при вводе новой строки пользователем - в параметр res передается текст новой строки
    prompttext('> Укажите любое число: ')
    if(i == 0) {
        i++;
    }

    if(inStarted == true) { // проверка, согласился пользователь или нет с началом ввода
        if(isNaN(res) == false) { // если res(введенное пользователем число - не является числом = true, иначе false) => подробнее, метод IsNaN пытается преобразовать res в число, если res не может быть преобразован(если тип данных у значения переменной res будет: String, Object, Nan, undefined), то возвращается true, в противоположном случае - false(если тип данных у значения переменной res будет: boolean, null, number)
            Array.push(parseInt(res)) // добавляем значение в массив "Array" , если res является числом
            if(i === 7) { // если i = 7, то прекращаем стриминг консоли 
                rl.pause()
            }
            i++; // добавляем к i + 1
        } else {
            console.log(`Указанное вами число \`${res}\` - не число. Укажите другое`)
        }
    }
});

rl.on('SIGINT', () => { // триггер на нажатие ctrl + c в консоли
    console.log(`\nВвод чисел был закончен принудительно сочетанием клавиш CTRL + C`);
    rl.close(); // закрытие потока стриминга
})

rl.on('pause', () => { // триггер на прекращение стриминга
    if(inStarted == false) { // если пользователь нажал ctrl + c еще до начала
        console.log(`Ввод чисел был отменен, так как вы не согласились его начать`)
    } else if(result == 0 && inStarted && Array.length >= 1) { // после начала
        multiply()
    }
})



// ^ - выше все с вводом

// без ввода чисел

